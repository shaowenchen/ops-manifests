apiVersion: crd.chenshaowen.com/v1
kind: Task
metadata:
  name: alert-gpu-driver
  namespace: ops-system
spec:
  desc: check gpu driver version on specified host
  host: "alert-card=gpu"
  steps:
    - name: check-gpu-driver
      content: |
        #!/usr/bin/python
        import os
        import subprocess
        import requests
        import json
        import re

        message = ''
        current_version = ''

        def send(status, message, value=''):
            payload = {
                'host': '${HOSTNAME}',
                'type': 'TaskRunReport',
                'kind': '${TASKRUN}',
                'threshold': 'installed',
                'operator': '==',
                'value': str(value),
                'status': status,
                'message': message
            }
            headers = {
                'Content-Type': 'application/json'
            }
            response = requests.post('${OPSSERVER_ENDPOINT}/api/v1/namespaces/${NAMESPACE}/events/taskruns.${TASKRUN}.reports.${HOSTNAME}', headers=headers, data=json.dumps(payload))
            print(response.text)

        def get_nvidia_driver_version():
            """通过多种方式获取NVIDIA驱动版本"""
            version_info = None
            
            # 方法1: 使用 nvidia-smi
            try:
                result = subprocess.run(['nvidia-smi', '--query-gpu=driver_version', '--format=csv,noheader,nounits'], 
                                      stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True, timeout=10)
                if result.returncode == 0 and result.stdout.strip():
                    version_info = result.stdout.strip().split('\n')[0].strip()
                    return version_info
            except Exception as e:
                print(f"nvidia-smi方法失败: {e}")

            # 方法2: 读取 /proc/driver/nvidia/version
            try:
                with open('/proc/driver/nvidia/version', 'r') as f:
                    content = f.read()
                    # 解析类似 "NVRM version: NVIDIA UNIX x86_64 Kernel Module  470.182.03"
                    match = re.search(r'Kernel Module\s+(\d+\.\d+(?:\.\d+)?)', content)
                    if match:
                        version_info = match.group(1)
                        return version_info
            except Exception as e:
                print(f"读取/proc/driver/nvidia/version失败: {e}")

            # 方法3: 使用 modinfo nvidia
            try:
                result = subprocess.run(['modinfo', 'nvidia'], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True, timeout=10)
                if result.returncode == 0:
                    for line in result.stdout.split('\n'):
                        if line.startswith('version:'):
                            version_info = line.split(':', 1)[1].strip()
                            return version_info
            except Exception as e:
                print(f"modinfo方法失败: {e}")

            return None

        def check_gpu_devices():
            """检查是否有GPU设备"""
            try:
                # 检查是否有NVIDIA GPU设备
                result = subprocess.run(['lspci', '|', 'grep', '-i', 'nvidia'], shell=True,
                                      stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                if result.returncode == 0 and result.stdout.strip():
                    return True
                
                # 检查 /dev/nvidia* 设备文件
                nvidia_devices = [f for f in os.listdir('/dev') if f.startswith('nvidia')]
                if nvidia_devices:
                    return True
                    
                return False
            except Exception as e:
                print(f"检查GPU设备失败: {e}")
                return False

        try:
            # 首先检查是否有GPU设备
            if not check_gpu_devices():
                message = '未检测到NVIDIA GPU设备'
                print(message)
                send('normal', message, 'no_gpu_device')
                exit(0)

            # 获取驱动版本
            current_version = get_nvidia_driver_version()
            if not current_version:
                message = '无法获取NVIDIA驱动版本，驱动未正确安装'
                print(f"告警: {message}")
                send('alerting', message, 'not_installed')
            else:
                message = f'GPU驱动已安装，版本: {current_version}'
                print(message)
                send('normal', message, current_version)

        except Exception as e:
            if len(message) == 0:
                message = str(e)
            print(f"错误: {message}")
            send('alerting', message, 'error')

apiVersion: crd.chenshaowen.com/v1
kind: Task
metadata:
    name: alert-gpu-driver
    namespace: ops-system
spec:
    desc: check gpu driver version on specified host
    host: "alert-card=gpu"
    variables:
        min_version:
            default: "470.0"
    steps:
        - name: check-gpu-driver
          content: |
              #!/usr/bin/python
              import os
              import subprocess
              import requests
              import json
              import re

              min_version = '${min_version}'
              message = ''
              current_version = ''

              def send(status, message, value=''):
                  payload = {
                      'host': '${HOSTNAME}',
                      'type': 'TaskRunReport',
                      'kind': '${TASKRUN}',
                      'threshold': min_version,
                      'operator': '>=',
                      'value': str(value),
                      'status': status,
                      'message': message
                  }
                  headers = {
                      'Content-Type': 'application/json'
                  }
                  response = requests.post('${OPSSERVER_ENDPOINT}/api/v1/namespaces/${NAMESPACE}/events/taskruns.${TASKRUN}.reports.${HOSTNAME}', headers=headers, data=json.dumps(payload))
                  print(response.text)

              def get_nvidia_driver_version():
                  """通过多种方式获取NVIDIA驱动版本"""
                  version_info = None
                  
                  # 方法1: 使用 nvidia-smi
                  try:
                      result = subprocess.run(['nvidia-smi', '--query-gpu=driver_version', '--format=csv,noheader,nounits'], 
                                            stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True, timeout=10)
                      if result.returncode == 0 and result.stdout.strip():
                          version_info = result.stdout.strip().split('\n')[0].strip()
                          return version_info
                  except Exception as e:
                      print(f"nvidia-smi方法失败: {e}")

                  # 方法2: 读取 /proc/driver/nvidia/version
                  try:
                      with open('/proc/driver/nvidia/version', 'r') as f:
                          content = f.read()
                          # 解析类似 "NVRM version: NVIDIA UNIX x86_64 Kernel Module  470.182.03"
                          match = re.search(r'Kernel Module\s+(\d+\.\d+(?:\.\d+)?)', content)
                          if match:
                              version_info = match.group(1)
                              return version_info
                  except Exception as e:
                      print(f"读取/proc/driver/nvidia/version失败: {e}")

                  # 方法3: 使用 modinfo nvidia
                  try:
                      result = subprocess.run(['modinfo', 'nvidia'], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True, timeout=10)
                      if result.returncode == 0:
                          for line in result.stdout.split('\n'):
                              if line.startswith('version:'):
                                  version_info = line.split(':', 1)[1].strip()
                                  return version_info
                  except Exception as e:
                      print(f"modinfo方法失败: {e}")

                  return None

              def check_gpu_devices():
                  """检查是否有GPU设备"""
                  try:
                      # 检查是否有NVIDIA GPU设备
                      result = subprocess.run(['lspci', '|', 'grep', '-i', 'nvidia'], shell=True,
                                            stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                      if result.returncode == 0 and result.stdout.strip():
                          return True
                      
                      # 检查 /dev/nvidia* 设备文件
                      nvidia_devices = [f for f in os.listdir('/dev') if f.startswith('nvidia')]
                      if nvidia_devices:
                          return True
                          
                      return False
                  except Exception as e:
                      print(f"检查GPU设备失败: {e}")
                      return False

              try:
                  # 首先检查是否有GPU设备
                  if not check_gpu_devices():
                      message = '未检测到NVIDIA GPU设备'
                      print(message)
                      send('normal', message, 'N/A')
                      exit(0)

                  # 获取驱动版本
                  current_version = get_nvidia_driver_version()
                  if not current_version:
                      message = '无法获取NVIDIA驱动版本，可能驱动未正确安装'
                      raise Exception(message)

                  print(f"当前NVIDIA驱动版本: {current_version}")
                  
                  # 版本比较
                  def compare_versions(v1, v2):
                      """简单的版本比较函数，返回 -1(v1<v2), 0(v1==v2), 1(v1>v2)"""
                      try:
                          # 将版本号分割为数字列表
                          v1_parts = [int(x) for x in v1.split('.')]
                          v2_parts = [int(x) for x in v2.split('.')]
                          
                          # 补齐长度不一致的版本号
                          max_len = max(len(v1_parts), len(v2_parts))
                          v1_parts.extend([0] * (max_len - len(v1_parts)))
                          v2_parts.extend([0] * (max_len - len(v2_parts)))
                          
                          # 逐个比较版本号部分
                          for i in range(max_len):
                              if v1_parts[i] < v2_parts[i]:
                                  return -1
                              elif v1_parts[i] > v2_parts[i]:
                                  return 1
                          return 0
                      except Exception:
                          # 如果解析失败，使用字符串比较
                          if v1 < v2:
                              return -1
                          elif v1 > v2:
                              return 1
                          return 0

                  if compare_versions(current_version, min_version) < 0:
                      message = f'GPU驱动版本过低，当前版本: {current_version}，最低要求: {min_version}'
                      raise Exception(message)
                  else:
                      message = f'GPU驱动版本正常，当前版本: {current_version}'
                      print(message)

              except Exception as e:
                  if len(message) == 0:
                      message = str(e)
                  print(f"错误: {message}")
                  send('alerting', message, current_version or 'N/A')
              else:
                  send('normal', message, current_version)

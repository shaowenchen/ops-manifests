apiVersion: crd.chenshaowen.com/v1
kind: Task
metadata:
  name: alert-hosts-status
  namespace: ops-system
spec:
  desc: host status including card count, disk usage, memory usage, and heart status
  host: anymaster
  variables:
    disk_threshold:
      default: "80"
    mem_threshold:
      default: "80"
  steps:
    - name: alert-hosts-status
      content: |
        #!/usr/bin/python
        import subprocess
        import requests
        import json
        import re
        from datetime import datetime, timedelta

        disk_threshold = int('${disk_threshold}')
        mem_threshold = int('${mem_threshold}')

        def send(status, message, host, threshold, operator, value):
            payload = {
                'kind': '${TASKRUN}',
                'type': 'TaskRunReport',
                'status': status,
                'message': message,
                'host': host,
                'threshold': threshold,
                'operator': operator,
                'value': value
            }
            headers = {
                'Content-Type': 'application/json'
            }
            response = requests.post('${OPSSERVER_ENDPOINT}/api/v1/namespaces/${NAMESPACE}/events/taskruns.${TASKRUN}.reports.' + host,
                                    headers=headers, data=json.dumps(payload))
            print(response.text)

        def get_all_hosts():
            try:
                cmd = "kubectl -n ops-system get hosts -o json"
                result = subprocess.check_output(cmd, shell=True).decode('utf-8')
                return json.loads(result)
            except Exception as e:
                print(f"Error: {e}")
                return None

        def extract_disk_usage(disk_usage_str):
            usage_percentages = re.findall(r'\d+%', disk_usage_str)
            return [int(x.strip('%')) for x in usage_percentages]

        def check_card_count(host):
            try:
                metadata = host['metadata']
                status = host.get('status', {})
                labels = metadata.get('labels', {})
                accelerator_count = int(status.get('acceleratorCount', 0))
                hostname = status.get('hostname')
                label_card_num = int(labels.get('card-num', 8))

                if accelerator_count != label_card_num and accelerator_count != 0:
                    message = (f"{hostname} acceleratorCount ({accelerator_count}) "
                              f"!= label.card-num ({label_card_num})")
                    return 'alerting', message, hostname, 'label.card-num', '!=', f"{accelerator_count} vs {label_card_num}"
            except Exception as e:
                return 'alerting', f"Error processing host: {e}", metadata.get('name', 'unknown'), 'label.card-num', '!=', 'error'
            
            return 'normal', '', hostname, 'label.card-num', '!=', ''

        def check_disk_usage(host):
            status = 'normal'
            message = ''
            node_name = host['status'].get('hostname', '')
            value = ''
            threshold_str = str(disk_threshold)
            try:
                disk_usage = host['status'].get('diskUsagePercent', '')
                disk_usage_list = extract_disk_usage(disk_usage)

                for i, usage in enumerate(disk_usage_list):
                    if usage > disk_threshold:
                        message += (f"Disk {i + 1} usage {usage}% exceeds threshold {disk_threshold}% on host {node_name}. ")
                        status = 'alerting'
                        value = str(usage)
            except KeyError as e:
                print(f"KeyError: {e}")
                message = f"Invalid data format for host {node_name}"
                status = 'alerting'
            
            return status, message, node_name, threshold_str, '>', value

        def check_mem_usage(host):
            status = 'normal'
            message = ''
            value = ''
            node_name = host['status'].get('hostname', '')
            threshold_str = str(mem_threshold)
            try:
                mem_usage = host['status'].get('memUsagePercent', '')
                mem_usage_int = int(mem_usage.strip('%').split('.')[0])

                if mem_usage_int > mem_threshold:
                    message += (f"Memory usage {mem_usage_int}% exceeds threshold {mem_threshold}% on host {node_name}.")
                    status = 'alerting'
                    value = str(mem_usage_int)
            except KeyError as e:
                print(f"KeyError: {e}")
                message = f"Invalid data format for host {node_name}"
                status = 'alerting'

            return status, message, node_name, threshold_str, '>', value

        def check_heart_status(host):
            hostname = host['metadata']['name']
            if host['status']['heartStatus'] == 'Failed':
                status = 'alerting'
                message = f"Host {hostname} failed to report heart status."
                value = 'Failed'
            else:
                status = 'normal'
                message = f"Host {hostname} reported heart status successfully."
                value = 'Successed'
            return status, message, hostname, 'Successed', '!=', value

        def main():
            hosts_data = get_all_hosts()
            if hosts_data and 'items' in hosts_data:
                for host in hosts_data['items']:
                    # Check heart status
                    status_heart, message_heart, hostname_heart, threshold_heart, operator_heart, value_heart = check_heart_status(host)
                    if status_heart == 'alerting':
                        send(status_heart, message_heart, hostname_heart, threshold_heart, operator_heart, value_heart)
                    
                    # Only proceed with other checks if heart status is not Failed
                    if status_heart != 'alerting':
                        # Check card count
                        status_card, message_card, hostname_card, threshold_card, operator_card, value_card = check_card_count(host)
                        if status_card == 'alerting':
                            send(status_card, message_card, hostname_card, threshold_card, operator_card, value_card)

                        # Check disk usage
                        status_disk, message_disk, hostname_disk, threshold_disk, operator_disk, value_disk = check_disk_usage(host)
                        if status_disk == 'alerting':
                            send(status_disk, message_disk, hostname_disk, threshold_disk, operator_disk, value_disk)

                        # Check memory usage
                        status_mem, message_mem, hostname_mem, threshold_mem, operator_mem, value_mem = check_mem_usage(host)
                        if status_mem == 'alerting':
                            send(status_mem, message_mem, hostname_mem, threshold_mem, operator_mem, value_mem)

        if __name__ == "__main__":
            main() 
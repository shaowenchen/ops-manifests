apiVersion: crd.chenshaowen.com/v1
kind: Task
metadata:
    name: alert-gpu-xid
    namespace: ops-system
spec:
    desc: check gpu xid errors from dmesg
    host: "alert-card=gpu"
    steps:
        - name: alert-gpu-xid
          content: |
              #!/usr/bin/python
              import os
              import subprocess
              import requests
              import json
              from datetime import datetime

              message = ''
              error_count = 0

              def send(status, message, value):
                  payload = {
                      'host': '${HOSTNAME}',
                      'type': 'TaskRunReport',
                      'kind': '${TASKRUN}',
                      'threshold': '0',
                      'operator': '==',
                      'value': str(value),
                      'status': status,
                      'message': message
                  }
                  headers = {
                      'Content-Type': 'application/json'
                  }
                  response = requests.post('${OPSSERVER_ENDPOINT}/api/v1/namespaces/${NAMESPACE}/events/taskruns.${TASKRUN}.reports.${HOSTNAME}', headers=headers, data=json.dumps(payload))
                  print(response.text)

              def build_message(message, line_info=''):
                  if line_info == '':
                      return f'{message}'
                  if message == '':
                      return line_info
                  return f'{message}\n{line_info}'

              try:
                  # 执行 dmesg -T 获取系统日志
                  output = ''
                  try:
                      result = subprocess.run(['dmesg', '-T'], universal_newlines=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
                      output = result.stdout
                      if result.returncode != 0:
                          raise Exception(f'dmesg command failed: {result.stderr}')
                  except Exception as e:
                      raise Exception(f'Failed to execute dmesg: {str(e)}')
                  
                  # 过滤包含 "xid" 的行
                  xid_lines = []
                  for line in output.split('\n'):
                      if 'xid' in line.lower():
                          xid_lines.append(line.strip())
                  
                  # 检查包含 "xid" 的行中是否包含 "error"
                  error_lines = []
                  for line in xid_lines:
                      if 'error' in line.lower():
                          error_lines.append(line)
                          error_count += 1
                  
                  # 构建消息
                  if error_count > 0:
                      message = f'Found {error_count} GPU XID error(s):'
                      for error_line in error_lines:
                          message = build_message(message, error_line)
                      send('alerting', message, error_count)
                  else:
                      if len(xid_lines) > 0:
                          send('normal', f'Found {len(xid_lines)} XID line(s) but no errors', 0)
                      else:
                          send('normal', 'No XID lines found', 0)
                          
              except Exception as e:
                  send('alerting', str(e), -1)

apiVersion: crd.chenshaowen.com/v1
kind: Task
metadata:
  name: alert-hosts-card
  namespace: ops-system
spec:
  desc: alert-hosts-card
  host: anymaster
  steps:
    - name: alert-hosts-card
      content: |
        #!/usr/bin/python
        import subprocess
        import requests
        import json
        import re

        def send(status, message, host, value):
            payload = {
                'kind': '${TASKRUN}',
                'type': 'TaskRunReport',
                'status': status,
                'message': message,
                'host': host,
                'threshold': 'label.card-num',
                'operator': '!=',
                'value': value
            }
            headers = {
                'Content-Type': 'application/json'
            }
            response = requests.post('${OPSSERVER_ENDPOINT}/api/v1/namespaces/${NAMESPACE}/events/taskruns.${TASKRUN}.reports.' + host,
                                     headers=headers, data=json.dumps(payload))
            print(response.text)

        def get_all_hosts():
            try:
                cmd = "kubectl -n ops-system get hosts -o json"
                result = subprocess.check_output(cmd, shell=True).decode('utf-8')
                return json.loads(result)
            except Exception as e:
                print(f"Error: {e}")
                return None

        def check_card_count(host):
            try:
                metadata = host['metadata']
                status = host.get('status', {})
                labels = metadata.get('labels', {})
                hostname = metadata.get('name', '')
                accelerator_count = int(status.get('acceleratorCount', 0))
                label_card_num = int(labels.get('card-num', -1))  # -1 表示缺失

                if accelerator_count != label_card_num:
                    message = (f"Host {hostname} acceleratorCount ({accelerator_count}) "
                               f"!= label.card-num ({label_card_num})")
                    return 'alerting', message, hostname, f"{accelerator_count} vs {label_card_num}"
            except Exception as e:
                return 'alerting', f"Error processing host: {e}", metadata.get('name', 'unknown'), 'error'
            
            return 'normal', '', hostname, ''

        def main():
            hosts_data = get_all_hosts()
            if hosts_data and 'items' in hosts_data:
                for host in hosts_data['items']:
                    if host.get('status', {}).get('heartStatus', '') == 'Failed':
                        continue
                    status, message, hostname, value = check_card_count(host)
                    if status == 'alerting':
                        send(status, message, hostname, value)

        if __name__ == "__main__":
            main() 
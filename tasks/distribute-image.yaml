apiVersion: crd.chenshaowen.com/v1
kind: Task
metadata:
  name: distribute-image
  namespace: ops-system
spec:
  desc: Distribute Docker images to target host using nerdctl save/load and scp
  host: anymaster
  variables:
    image:
      display: "Docker image name (e.g., nginx:latest)"
      required: true
      type: string
    target_host:
      display: "Target host IP or hostname"
      required: true
      type: string
    platform:
      display: "Target platform/architecture (e.g., linux/amd64, linux/arm64)"
      required: false
      type: string
      default: "linux/amd64"
  steps:
    - name: distribute-image
      content: |
        #!/bin/bash
        set -e
        
        echo "Starting image distribution process..."
        echo "Image: ${image}"
        echo "Target host: ${target_host}"
        
        # Step 1: Pull the image if it doesn't exist locally
        echo "Step 1: Checking and pulling image..."
        if ! nerdctl -n k8s.io images | grep -q "${image}"; then
          echo "Image ${image} not found locally, pulling from registry..."
          echo "Target platform: ${platform}"
          nerdctl -n k8s.io pull --platform ${platform} ${image}
        else
          echo "Image ${image} already exists locally"
        fi
        
        # Step 2: Save image using nerdctl
        echo "Step 2: Saving image using nerdctl..."
        TEMP_DIR="/tmp/image-distribution-$(date +%s)"
        mkdir -p $TEMP_DIR
        IMAGE_TAR="$TEMP_DIR/image.tar"
        
        nerdctl -n k8s.io save -o $IMAGE_TAR ${image}
        if [ $? -eq 0 ]; then
          echo "Image saved successfully to $IMAGE_TAR"
        else
          echo "Failed to save image with nerdctl"
          exit 1
        fi
        
        # Step 3: Copy image to target host
        echo "Step 3: Copying image to target host..."
        scp "$IMAGE_TAR" "${target_host}:/tmp/"
        if [ $? -eq 0 ]; then
          echo "Image copied successfully to ${target_host}"
        else
          echo "Failed to copy image to ${target_host}"
          exit 1
        fi
        
        # Step 4: Load image on target host
        echo "Step 4: Loading image on target host..."
        
        # Remove existing image with the same name if it exists (ignore errors)
        echo "Removing any existing image with same name..."
        ssh ${target_host} "nerdctl -n k8s.io rmi ${image} 2>/dev/null || echo 'No existing image to remove'"
        echo "Image removal step completed"
        
        # Load the new image
        echo "Loading new image..."
        ssh ${target_host} "nerdctl -n k8s.io load -i /tmp/image.tar && rm -f /tmp/image.tar"
        if [ $? -eq 0 ]; then
          echo "Image loaded successfully on ${target_host}"
          
          # Verify the loaded image architecture
          echo "Verifying loaded image architecture..."
          ssh ${target_host} "nerdctl -n k8s.io images --format 'table {{.Repository}}\t{{.Tag}}\t{{.Platform}}' | grep '${image}'"
          
        else
          echo "Failed to load image on ${target_host}"
          exit 1
        fi
        
        # Step 5: Cleanup local files
        echo "Step 5: Cleaning up local temporary files..."
        rm -rf $TEMP_DIR
        
        echo "=========================================="
        echo "Image distribution completed successfully!"
        echo "Image: ${image}"
        echo "Target host: ${target_host}"
        echo "=========================================="
